cmake_minimum_required(VERSION 3.16)

# handle platform specifics:
if(PRISM_PLATFORM MATCHES "MACOS")
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_MACOS)
  if(PRISM_PLATFORM_ARCH MATCHES "ARM64")
    target_compile_definitions(prism PUBLIC PRISM_PLATFORM_ARCH_ARM64)
  else()
    target_compile_definitions(prism PUBLIC PRISM_PLATFORM_ARCH_X86_64)
  endif()
  target_compile_options(prism PRIVATE -Wall -Werror -pedantic -glldb -fobjc-arc)
elseif(PRISM_PLATFORM MATCHES "IOS")
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_IOS)
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_ARCH_ARM64)
  target_compile_options(prism PRIVATE -Wall -Werror -pedantic -glldb -fobjc-arc)
  set(PRISM_PLATFORM_ARCH "ARM64")
elseif(PRISM_PLATFORM MATCHES "WIN32")
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_WIN32)
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_ARCH_X86_64)
elseif(PRISM_PLATFORM MATCHES "LINUX")
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_LINUX)
  target_compile_definitions(prism PUBLIC PRISM_PLATFORM_ARCH_X86_64)
  target_compile_options(prism PRIVATE -Wall -Werror)
else()
  message(FATAL_ERROR "Unsupported platform")
endif()

# get opengl
if(PRISM_PLATFORM MATCHES "LINUX" OR PRISM_PLATFORM MATCHES "WIN32")
  find_package(OpenGL REQUIRED)
  target_include_directories(prism SYSTEM PUBLIC ${OPENGL_INCLUDE_DIR})
endif()

add_subdirectory("core")
add_subdirectory("event")
add_subdirectory("graphics")
add_subdirectory("logger")
add_subdirectory("util")